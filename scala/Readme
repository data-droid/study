# 빅데이터 - 스칼라, 스파크로 시작하기
* 스파크는 인메모리 기반 처리로 하둡 맵리듀스에 비해 100배 빠른 속도를 제공하며 ML, Graph 분석 등 다양한 컴포넌트를 가짐.
* 스파크는 스칼라로 작성되어 자바보다 짧은 코드로 표현 가능하며, JVM에서 동작하기 때문에 기존 자바 라이브러리를 모두 사용 가능.

## Scala
* 객체 지향 언어의 특징과 함수형 언어의 특징을 가지는 다중 패러다임 프로그래밍 언어.

### 특징
* JVML
    * JVM 위에서 동작하는 언어 (kotlin, Groovy 등..)
    * 자바의 모든 라이브러리를 사용가능함
    * 스칼라 컴파일러를 통해 바이트 코드로 변환하고, 바이트 코드는 JVM상에서 자바와 동일하게 실행됨.
* 함수형 언어
    * 자바에 비해 코드길이가 간결함.
    * getter, setter, 생성자를 생략하고, 표현식을 간소함.
* 바이트 코드 최적화
    * 자바보다 20% 속도가 빠름.
* 동시성에 강함
    * Immutable 변수를 많이 가지고 있어, 속성을 변경 불가능하게 하고, 순수 함수를 사용하여 병렬 프로그래밍에 강점이 있음.
    
### 함수형 프로그래밍
* 함수형 언어 
    * 함수형 프로그래밍의 패러다임을 따르는 언어
    * C#, Java 같은 객체지향언어에서도 람다 함수의 도입을 통해 함수형 지원하려고 함.
* 함수형 프로그래밍
    * 자료 처리를 수학적 함수의 계산으로 취급하고 상태 변화와 가변 데이터를 피함.
    * 순수 함수와 보조 함수의 조합으로 조건문, 반복문을 제거하여 복잡성을 낮춤.
    * 변수 사용을 줄여 상태 변경을 피함.
* 순수 함수(Pure Function)
    * 함수의 실행이 외부에 영향을 끼치지 않는 함수.(병렬 계산이 가능!)
* 익명 함수(Anonymous Function)
    * 함수 선언 없이 익명 함수를 생성하여 코드 길이를 줄임.
    * Arrays.asList(1,2,3).stream().reduce((a,b)->a-b).get()
* 고차 함수(Higher-Order Function)
    * 함수를 인수로 취급하는 함수.
    * 함수를 입력 파라미터나 출력 값으로 처리.
    * Collection.sort(new ArrayList<Integer>(), (x,y) -> x>=y? -1:1);